# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000
00001010.00000000.01010000.11000000
Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
subnet = input('Введите IP-сеть в формате subnet/mask: ')
oct1, oct2, oct3, oct4 = subnet.split('.')
oct4, mask = oct4.split('/')
bin1 = bin(int(oct1)).replace('0b','')
bin2 = bin(int(oct2)).replace('0b','')
bin3 = bin(int(oct3)).replace('0b','')
bin4 = bin(int(oct4)).replace('0b','')
bin_ip = '0' * (8 - len(bin1)) + bin1 + '0' * (8 - len(bin2)) + bin2 + '0' * (8 - len(bin3)) + bin3 + '0' * (8 - len(bin4)) + bin4
true_subnet = (bin_ip[0:int(mask)] + '0' * (32 - int(mask)))
bmask = '1' * int(mask) + '0' * (32 - int(mask))
print(f'''Network:
{int(true_subnet[0:8], 2):<10}{int(true_subnet[8:16], 2):<10}{int(true_subnet[16:24], 2):<10}{int(true_subnet[24:32], 2):<10}
{int(true_subnet[0:8]):08}  {int(true_subnet[8:16]):08}  {int(true_subnet[16:24]):08}  {int(true_subnet[24:32]):08}

Mask:
/{mask}
{int(bmask[0:8], 2):<10}{int(bmask[8:16], 2):<10}{int(bmask[16:24], 2):<10}{int(bmask[24:32], 2):<10}
{int(bmask[0:8]):08}  {int(bmask[8:16]):08}  {int(bmask[16:24]):08}  {int(bmask[24:32]):08}
''')
